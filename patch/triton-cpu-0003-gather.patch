diff --git a/third_party/cpu/lib/TritonToTritonCPU/ConvertMemoryOps.cpp b/third_party/cpu/lib/TritonToTritonCPU/ConvertMemoryOps.cpp
index 02a45898..8fcc200e 100644
--- a/third_party/cpu/lib/TritonToTritonCPU/ConvertMemoryOps.cpp
+++ b/third_party/cpu/lib/TritonToTritonCPU/ConvertMemoryOps.cpp
@@ -5,20 +5,30 @@
 
 #include "mlir/Analysis/DataFlowFramework.h"
 #include "mlir/Conversion/LLVMCommon/TypeConverter.h"
+#include "mlir/Dialect/Arith/IR/Arith.h"
 #include "mlir/Dialect/ControlFlow/IR/ControlFlowOps.h"
 #include "mlir/Dialect/Index/IR/IndexDialect.h"
 #include "mlir/Dialect/Index/IR/IndexOps.h"
 #include "mlir/Dialect/MemRef/IR/MemRef.h"
 #include "mlir/Dialect/Utils/IndexingUtils.h"
 #include "mlir/Dialect/Vector/IR/VectorOps.h"
+#include "mlir/IR/BuiltinAttributes.h"
+#include "mlir/IR/BuiltinTypes.h"
+#include "mlir/IR/Value.h"
 #include "mlir/Pass/Pass.h"
+#include "mlir/Support/LogicalResult.h"
+#include "mlir/Transforms/DialectConversion.h"
 #include "mlir/Transforms/GreedyPatternRewriteDriver.h"
 
 #include "triton/Analysis/Allocation.h"
 #include "triton/Analysis/AxisInfo.h"
 #include "triton/Analysis/Membar.h"
 #include "triton/Dialect/Triton/IR/Dialect.h"
+#include "triton/Dialect/Triton/IR/Types.h"
 #include "triton/Dialect/TritonCPU/IR/Dialect.h"
+#include "llvm/ADT/SmallVector.h"
+#include "llvm/Support/Casting.h"
+#include <iostream>
 
 namespace mlir {
 namespace triton {
@@ -582,6 +592,10 @@ struct LoadOpConversion : public MemoryOpConversion<triton::LoadOp> {
       if (axisInfo) {
         return lowerUsingAxisInfo(axisInfo, loadOp, rewriter);
       }
+      if (succeeded(lowerToGather(loadOp, rewriter))) {
+        std::cout << "Using Gather" << std::endl;
+        return success();
+      }
       return lowerToScalarLoads(loadOp, rewriter);
     }
 
@@ -664,9 +678,80 @@ struct LoadOpConversion : public MemoryOpConversion<triton::LoadOp> {
       return success();
     }
 
+    if (succeeded(lowerToGather(loadOp, rewriter))) {
+      std::cout << "Using Gather" << std::endl;
+      return success();
+    }
+
     return lowerToScalarLoads(loadOp, rewriter);
   }
 
+  // use `vector.gather` to lower the `tt.load` op.
+  LogicalResult lowerToGather(triton::LoadOp loadOp,
+                              ConversionPatternRewriter &rewriter) const {
+    auto loc = loadOp.getLoc();
+    auto vecTy =
+        dyn_cast<VectorType>(getTypeConverter()->convertType(loadOp.getType()));
+    auto shape = vecTy.getShape();
+
+    // tl.load(base + offsets, mask, other) will be translated to:
+    //
+    // 1. splat base
+    // 2. add splat and offsets
+    // 3. tt.load
+    // 
+    // With this pattern, `vector.gather` can be used to lower the `tt.load` op.
+
+    Value ptrs = loadOp.getPtr();
+    auto addPtrOp = ptrs.getDefiningOp<triton::AddPtrOp>();
+
+    if (!addPtrOp) {
+      return failure();
+    }
+
+    Value basePtr = nullptr;
+    Value offsets = nullptr;
+
+    if (auto splatOp =
+            addPtrOp.getOperand(0).getDefiningOp<triton::SplatOp>()) {
+      basePtr = splatOp.getOperand();
+      offsets = addPtrOp.getOperand(1);
+    } else if (auto splatOp =
+                   addPtrOp.getOperand(1).getDefiningOp<triton::SplatOp>()) {
+      basePtr = splatOp.getOperand();
+      offsets = addPtrOp.getOperand(0);
+    } else {
+      return failure();
+    }
+
+    auto pointeeType = dyn_cast<PointerType>(basePtr.getType()).getPointeeType();
+    auto gatherBase = rewriter.create<triton::cpu::PtrToMemRefOp>(
+        loc, MemRefType::get({}, pointeeType), basePtr);
+    auto gatherIndices = rewriter.getRemappedValue(offsets);
+
+    Value mask;
+    if (loadOp.getMask()) {
+      mask = rewriter.getRemappedValue(loadOp.getMask());
+    } else {
+      // If the mask is not provided, create a mask with all true values.
+      auto maskElementType = rewriter.getI1Type();
+      auto maskVectorType = VectorType::get(shape, maskElementType);
+      mask = rewriter.create<arith::ConstantOp>(
+          loc, maskVectorType, DenseElementsAttr::get(maskVectorType, true));
+    }
+
+    Value passThru = convertOtherVal(loadOp, rewriter);
+
+    auto gather = rewriter.create<vector::GatherOp>(
+        loc, vecTy, gatherBase,
+        // The base is a 0-D memref, so the indices are empty.
+        llvm::SmallVector<Value>(), gatherIndices, mask, passThru);
+
+    rewriter.replaceOp(loadOp, gather);
+
+    return success();
+  }
+
   LogicalResult lowerToScalarLoads(triton::LoadOp loadOp,
                                    ConversionPatternRewriter &rewriter) const {
     // Scalar loads and boundary checks are not expected.
